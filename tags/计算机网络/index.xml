<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机网络 on Terminal</title>
    <link>https://kerwinglas.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 计算机网络 on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kerwinglas.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ping命令引发过程解析</title>
      <link>https://kerwinglas.github.io/posts/ping%E5%91%BD%E4%BB%A4%E5%BC%95%E5%8F%91%E8%BF%87%E7%A8%8B%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kerwinglas.github.io/posts/ping%E5%91%BD%E4%BB%A4%E5%BC%95%E5%8F%91%E8%BF%87%E7%A8%8B%E8%A7%A3%E6%9E%90/</guid>
      <description>背景 过程使用的网络拓扑图如下。
采取的操作是，在主机PC-PT PC9的终端输入指令ping 192.168.1.3，分析数据传递过程。
ICMP协议是“Internet Control Message Protocol”（因特网控制消息协议）的缩写。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。 ping (Packet Internet Groper)，因特网包探索器，用于测试网络连接量的程序。Ping发送一个ICMP；回声请求消息给目的地并报告是否收到所希望的ICMP echo（ICMP回声应答）。它是用来检查网络是否通畅或者网络连接速度的命令 ping命令通常用来作为网络可用性的检查。ping命令可以对一个网络地址发送测试数据包，看该网络地址是否有响应并统计响应时间，以此测试网络。 ping和ICMP的关系：ping命令发送数据使用的是ICMP协议。
过程解析 主机PC9生成ICMP报文 Ping进程启动下一个ping请求。 ping进程创建ICMP回显请求消息（ICMP Echo Request message）并将其发送至下一个进程。 源IP地址未指定，因此设备将源IP地址设为端口的IP地址。 目标IP地址既不在一个子网也不是广播地址。而主机默认网关已设置，因此设备将下一跳设为其默认网关。 下一跳的IP地址（即路由器端口Fa0/0的IP地址）是单播地址，ARP进程在ARP表中寻找该表项。 若在表中成功找到该表项，则ARP进程将帧的目的MAC地址设置为表中给出的地址（即路由器端口Fa0/0的MAC地址）。 若未成功找到表项，则通过ARP协议获得。主机通过广播帧发送ARP请求包，在数据包内给出自己的IP地址和端口Fa0的MAC地址，以及目的IP地址（路由器端口Fa0/0的IP地址192.168.0.3，即默认网关）。路由器端口Fa0/0接收该广播帧，并向PC9发送ARP响应分组，给出自己的MAC地址0060.5C59.2501。 设备将协议数据单元（PDU）封装至以太网帧中。 端口Fa0发送该以太网帧。 OSI模型如图所示。
交换机Switch0接收该帧并转发 交换机Switch0接收该帧并转发 注：交换机有一个交换表，存在自学习机制。当它收到该帧，会在交换表中添加记录，该记录将PC9端口Fa0的MAC地址映射至交换机接收到该帧的端口。假设该交换表无Router2端口Fa0/0的MAC地址的映射信息，则向其余各个端口进行转发。
路由器端口Fa0/0接收该帧 其OSI模型如下所示。</description>
      <content>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;过程使用的网络拓扑图如下。&lt;/p&gt;

  &lt;img src=&#34;https://kerwinglas.github.io/img/ffdb7406_8277321.png&#34;  alt=&#34;网络拓扑图&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;zoom: 33%;&#34;  /&gt;


&lt;p&gt;采取的操作是，在主机PC-PT PC9的终端输入指令&lt;code&gt;ping 192.168.1.3&lt;/code&gt;，分析数据传递过程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ICMP协议是“Internet Control Message Protocol”（因特网控制消息协议）的缩写。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。
ping (Packet Internet Groper)，因特网包探索器，用于测试网络连接量的程序。Ping发送一个ICMP；回声请求消息给目的地并报告是否收到所希望的ICMP echo（ICMP回声应答）。它是用来检查网络是否通畅或者网络连接速度的命令
ping命令通常用来作为网络可用性的检查。ping命令可以对一个网络地址发送测试数据包，看该网络地址是否有响应并统计响应时间，以此测试网络。
ping和ICMP的关系：ping命令发送数据使用的是ICMP协议。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;过程解析&#34;&gt;过程解析&lt;/h1&gt;
&lt;h2 id=&#34;主机pc9生成icmp报文&#34;&gt;主机PC9生成ICMP报文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ping进程启动下一个ping请求。&lt;/li&gt;
&lt;li&gt;ping进程创建ICMP回显请求消息（ICMP Echo Request message）并将其发送至下一个进程。&lt;/li&gt;
&lt;li&gt;源IP地址未指定，因此设备将源IP地址设为端口的IP地址。&lt;/li&gt;
&lt;li&gt;目标IP地址既不在一个子网也不是广播地址。而主机默认网关已设置，因此设备将下一跳设为其默认网关。&lt;/li&gt;
&lt;li&gt;下一跳的IP地址（即路由器端口Fa0/0的IP地址）是单播地址，ARP进程在ARP表中寻找该表项。
若在表中成功找到该表项，则ARP进程将帧的目的MAC地址设置为表中给出的地址（即路由器端口Fa0/0的MAC地址）。
若未成功找到表项，则通过ARP协议获得。主机通过广播帧发送ARP请求包，在数据包内给出自己的IP地址和端口Fa0的MAC地址，以及目的IP地址（路由器端口Fa0/0的IP地址&lt;code&gt;192.168.0.3&lt;/code&gt;，即默认网关）。路由器端口Fa0/0接收该广播帧，并向PC9发送ARP响应分组，给出自己的MAC地址&lt;code&gt;0060.5C59.2501&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;设备将协议数据单元（PDU）封装至以太网帧中。&lt;/li&gt;
&lt;li&gt;端口Fa0发送该以太网帧。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OSI模型如图所示。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;交换机switch0接收该帧并转发&#34;&gt;交换机Switch0接收该帧并转发&lt;/h2&gt;
&lt;p&gt;交换机Switch0接收该帧并转发
注：交换机有一个&lt;strong&gt;交换表&lt;/strong&gt;，存在自学习机制。当它收到该帧，会在交换表中添加记录，该记录将PC9端口Fa0的MAC地址映射至交换机接收到该帧的端口。假设该交换表无Router2端口Fa0/0的MAC地址的映射信息，则向其余各个端口进行转发。&lt;/p&gt;
&lt;h2 id=&#34;路由器端口fa00接收该帧&#34;&gt;路由器端口Fa0/0接收该帧&lt;/h2&gt;
&lt;p&gt;其OSI模型如下所示。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</content>
    </item>
    
  </channel>
</rss>
